<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>suryapolina.com</title>
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.15.3/css/all.css" crossorigin="anonymous">
    <link rel="icon" type="image/png" href="images/favicon.ico">
    <!-- Include Tailwind CSS from CDN -->
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.1.2/dist/tailwind.min.css" rel="stylesheet">
    <!-- Include stylesheet for Quill Editor -->
    <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
    <!-- Include the Quill library -->
    <script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/quill-image-resize-module@3.0.0/image-resize.min.js"></script>

</head>
<body class="bg-gray-100 flex flex-col items-center justify-center min-h-screen">

    <!-- Back Button -->
    <div class="absolute top-0 left-0 m-4">
        <button onclick="window.location.href='/blog'" class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 inline-flex items-center">
            <i class="fas fa-arrow-left mr-2"></i>
            Back
        </button>
    </div>
    <div class="flex flex-wrap w-full">
        <header class="w-full text-center py-4 bg-white shadow">
            <h1 class="text-3xl font-bold">Admin Panel</h1>
        </header>

        <!-- Posts Column -->
        <div class="bg-white p-4 shadow lg:w-1/4" style="max-height: 90vh; overflow-y: auto;">
            <ul>
                <% posts.forEach(post => { %>
                    <li class="post-item mb-4 p-2 relative hover:bg-blue-100 cursor-pointer" onclick="selectPostForEdit(this, <%= post.id %>)">
                        <!-- Clicking on this div will load the post -->
                        <div>
                            <h2 class="text-xl font-bold"><%= post.title %></h2>
                            <p><%= post.preview %></p>
                            <p class="text-sm text-gray-500">Published: <%= new Date(post.date_created).toLocaleDateString() %></p>
                        </div>
                        <!-- Delete button positioned absolutely to the top right corner -->
                        <button onclick="deletePost(<%= post.id %>)" class="absolute top-0 right-0 mt-2 mr-2 bg-gray-200 hover:bg-red-500 text-white font-bold py-1 px-2">
                            <i class="fa fa-trash"></i>
                        </button>
                    </li>
                <% }) %>
            </ul>
        </div>

        <!-- Editor Column -->
        <div class="w-full md:w-1/2 p-4">
            <form id="postForm" action="/submit" method="POST" enctype="multipart/form-data" class="space-y-6">
                <div class="flex flex-col">
                    <label for="title" class="mb-2 font-semibold">Title:</label>
                    <input type="text" id="title" name="title" class="form-input px-4 py-2 focus:border-blue-500 focus:outline-none" required>
                </div>
                <!-- New preview input box -->
                <div class="flex flex-col">
                    <label for="preview" class="mb-2 font-semibold">Preview:</label>
                    <textarea id="preview" name="preview" rows="3" class="form-textarea px-4 py-2 focus:border-blue-500 focus:outline-none" placeholder="Enter a preview of your post" required></textarea>
                </div>
                <!-- Create the editor container -->
                <div id="editor-container" class="bg-white"></div>
                <input type="hidden" id="editorContent" name="text">
                <div class="flex flex-col">
                    <label for="image" class="mb-2 font-semibold">Thumbnail:</label>
                    <input type="file" id="image" name="image" accept="image/*" multiple class="form-input px-4 py-2 border focus:border-blue-500 focus:outline-none">
                </div>
                <div class="flex flex-wrap items-center border border-gray-300 p-2 rounded">
                  <div id="tags" class="flex flex-wrap">
                    <!-- Tags will go here -->
                  </div>
                  <input type="text" id="tag-input" class="flex-1 p-2 outline-none" placeholder="Add a tag" onkeyup="addTag(event)" />
                </div>
                <button type="button" id="submitPostButton" class="px-4 py-2 bg-blue-500 text-white hover:bg-blue-700 focus:outline-none">Submit Post</button>
            </form>
        </div>
    </div>

     <!-- Footer -->
    <footer class="text-center py-5 mt-auto">
        <p>All rights reserved. &copy; Surya Polina</p>
    </footer>

     <!-- JavaScript -->
    <script>

        // Ensure that the ImageResize module is available globally
        if (window.Quill && window.QuillImageResizeModule) {
            window.Quill.register('modules/imageResize');
        }

        // Initialize Quill editor
        var quill = new Quill('#editor-container', {
          modules: {
              toolbar: [
                  [{'header': [1, 2, 3, false]}],
                  [{'font': []}],
                  ['bold', 'italic', 'underline', 'strike'],
                  [{'color': []}, {'background': []}],
                  [{'script': 'sub'}, {'script': 'super'}],
                  [{'list': 'ordered'}, {'list': 'bullet'}, {'indent': '-1'}, {'indent': '+1'}],
                  ['direction', {'align': []}],
                  ['link', 'image', 'video', 'blockquote', 'code-block'],
                  ['clean']  // remove formatting button
              ],
              imageResize: {
                  handleStyles: {
                      backgroundColor: 'black',
                      border: 'none',
                      color: 'white'
                  }
              }
          },
          theme: 'snow'
      });

        let existingTags = [];
        let selectedPostId = null;

        function submitPost() {
            // Get the HTML content of the editor
            var htmlContent = quill.root.innerHTML;

            // Create a FormData object from the form
            var formData = new FormData(document.getElementById('postForm'));

            // Append the editor content to the FormData
            formData.set('text', htmlContent); // Use set to ensure you don't create duplicates

            // Collect tags and append them to FormData
            const tags = collectTags();
            formData.set('tags', JSON.stringify(tags)); // Use set to overwrite any existing tags field

            // Use fetch to send the request
            fetch('/submit', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json()) // Parse the response as JSON
            .then(data => {
                alert('Post successfully created');
                console.log(data.message); // "Post successfully created."
                window.location.reload(); // This line will refresh the page
                // Handle successful form submission here, like redirecting to a new page or displaying a success message
            })
            .catch(error => console.error('Error loading post:', error));

            // Prevent the default form submission
            return false;
        }


        function loadPost(postId) {
            // Highlight the selected post
            const selectedPost = document.querySelector(`[data-post-id="${postId}"]`);
            if (selectedPost) {
                selectedPost.classList.add('bg-blue-100'); // Add the selection class to the clicked post
            }
            // Send AJAX request to get the post data
            fetch(`/post/${postId}`)
                .then(response => response.json())
                .then(data => {
                    // Populate the form fields
                    document.getElementById('title').value = data.title;
                    document.getElementById('preview').value = data.preview;
                    // Set the editor content
                    quill.clipboard.dangerouslyPasteHTML(data.text);
                    // Store existing tags
                    existingTags = data.tags || [];

                    // Display existing tags
                    displayTags(existingTags);
                    // Reset the file input for new file uploads
                    document.getElementById('image').value = '';
                })
                .catch(error => console.error('Error loading post:', error));
        }

        function deletePost(postId) {
            /*if (!confirm('Are you sure you want to delete this post?')) {
                return;
            }*/
            fetch(`/post/${postId}`, { method: 'DELETE' })
                .then(response => {
                    if (response.ok) {
                        // Remove the post element from the DOM or refresh the page
                        alert('Post deleted successfully');
                        window.location.reload(); // This line will refresh the page
                    } else {
                        alert('Error deleting post');
                    }
                })
                .catch(error => {
                    console.error('Error deleting post:', error);
                });
        }

        // In your client-side code
        function updatePost() {
            // Get the post ID
            const postId = selectedPostId;

            // Prepare the form data
            const formData = new FormData();
            formData.append('title', document.getElementById('title').value);
            formData.append('preview', document.getElementById('preview').value);
            formData.append('text', quill.root.innerHTML); 

            const imageInput = document.getElementById('image');
            if (imageInput.files[0]) {
                formData.append('image', imageInput.files[0]);
            }

            // Collect new tags from the DOM
            const newTags = collectTags();

            // Concatenate existing tags and new tags
            const allTags = [...new Set([...existingTags, ...newTags])];
            formData.append('tags', JSON.stringify(allTags));

            // Send the PUT request to the server
            fetch(`/post/${postId}`, {
                method: 'PUT',
                body: formData // formData will be sent as 'multipart/form-data'
            })
            .then(response => { 
                response.json();
                if (response.ok) {
                    // Remove the post element from the DOM or refresh the page
                    alert('Post updated successfully');
                    window.location.reload(); // This line will refresh the page
                } else {
                    alert('Error deleting post');
                }
            })
            .then(data => {
                console.log(data);
                // Handle success, maybe refresh the list of posts or provide user feedback
            })
            .catch(error => console.error('Error updating post:', error));
        }

        // Function to add tags to the display, including existing tags with removal buttons
        function displayTags(tagsArray) {
          const tagsContainer = document.getElementById('tags');
          tagsContainer.innerHTML = ''; // Clear previous tags

          tagsArray.forEach(tag => {
            const tagSpan = document.createElement('span');
            tagSpan.classList.add('tag', 'bg-gray-200', 'rounded', 'px-3', 'py-1', 'm-1', 'flex', 'items-center');
            tagSpan.textContent = tag;
            
            const removeBtn = document.createElement("span");
            removeBtn.textContent = ' x';
            removeBtn.classList.add('cursor-pointer', 'ml-2', 'tag-remove-btn');
            removeBtn.onclick = function() { removeTag(tagSpan, tag); };
            
            tagSpan.appendChild(removeBtn);
            tagsContainer.appendChild(tagSpan);
          });
        }

        function selectPostForEdit(postElement, postId) {
          if (selectedPostId === postId) {
            // Deselect the post
            selectedPostId = null;
            postElement.classList.remove('bg-blue-100');
            document.getElementById('submitPostButton').textContent = 'Submit Post';
            resetForm(); // Make sure this function clears the form
          } else {
            // Clear previously selected post
            if (selectedPostId !== null) {
              document.querySelector('.post-item.bg-blue-100').classList.remove('bg-blue-100');
            }

            // Select the new post
            selectedPostId = postId;
            postElement.classList.add('bg-blue-100');
            document.getElementById('submitPostButton').textContent = 'Update Post';
            loadPost(postId); // Make sure this function populates the form with the selected post's data
          }
        }

        function resetForm() {
            // Reset the form fields
            document.getElementById('title').value = '';
            document.getElementById('preview').value = '';
            quill.setText('');
            document.getElementById('image').value = null;

            // Clear the tags display
            const tagsContainer = document.getElementById('tags');
            tagsContainer.innerHTML = '';

            // Initialize or reset the hidden tags input
            let tagsInput = document.getElementById('tagsInput');
            if (!tagsInput) {
                tagsInput = document.createElement('input');
                tagsInput.type = 'hidden';
                tagsInput.id = 'tagsInput';
                tagsInput.name = 'tags';
                document.getElementById('postForm').appendChild(tagsInput);
            }
            tagsInput.value = JSON.stringify([]);
            existingTags = [];

            // Reset the form action to submit
            document.getElementById('postForm').action = '/submit';
        }

        function addTag(event) {
            if (event.key === "Enter" && event.target.value.trim() !== "") {
                // Create the container for the new tag
                const newTag = document.createElement("span");
                newTag.classList.add('bg-gray-200', 'rounded', 'px-3', 'py-1', 'm-1', 'flex', 'items-center');
                
                // Create a span for the tag text and add the input value
                const tagText = document.createElement("span");
                tagText.classList.add('tag-text');
                tagText.textContent = event.target.value.trim();
                newTag.appendChild(tagText);
                // Create a remove button for the tag
                const removeBtn = document.createElement("span");
                removeBtn.textContent = "×";
                removeBtn.classList.add('ml-2', 'cursor-pointer', 'tag-remove-btn');
                removeBtn.onclick = function() { newTag.remove(); };
                newTag.appendChild(removeBtn);
                
                // Append the new tag to the container
                document.getElementById("tags").appendChild(newTag);
                
                // Clear the input
                event.target.value = "";
            }
        }

         // Function to remove a tag from the display and from the local tag list
        function removeTag(tagElement, tagName) {
            // Remove the tag element from the DOM
            tagElement.remove();
            // Remove the tag from existingTags array
            const tagIndex = existingTags.indexOf(tagName);
            if (tagIndex > -1) {
                existingTags.splice(tagIndex, 1);
            }
            // Update the tags in the form
            updateFormTags();
        }

        // Collect tags from the DOM and update the hidden form field
        function updateFormTags() {
            const tagsInput = document.getElementById('tagsInput');
            if (tagsInput) {
                // Get all tag text elements
                const tagTextElements = document.querySelectorAll('.tag-text');
                const tags = Array.from(tagTextElements).map(element => element.textContent);

                // Update the hidden input field for tags
                tagsInput.value = JSON.stringify(tags);
            }
        }

        function collectTags() {
            const tagElements = document.getElementsByClassName('tag-text');
            const tags = Array.from(tagElements).map(element => element.textContent);
            return tags;
        }

        document.getElementById('submitPostButton').onclick = function() {
            if (selectedPostId) {
                updatePost();
            } else {
                submitPost();
            }
        };

    </script>
</body>
</html>
