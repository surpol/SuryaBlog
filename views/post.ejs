<!DOCTYPE html>
<html lang="en">
<head>
    <title>suryapolina.com</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.1.2/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.7.1/css/all.css">
    <link rel="stylesheet" type="text/css" href="/static/styles.css" />
    <link rel="icon" type="image/png" href="/images/favicon.ico">
</head>

<body class="bg-white">
    <!-- Header -->
    <header class="text-center py-6">
        <nav class="mt-4">
            <a href="/about" class="text-blue-600 hover:text-purple-800 mx-2">About</a>
            <a href="/blog" class="text-blue-600 hover:text-purple-800 mx-2">Blog</a>
            <a href="/portfolio" class="text-blue-600 hover:text-purple-800 mx-2">My Pages</a>
        </nav>
    </header>

    <!-- Grid Container -->
    <div class="container mx-auto px-4 py-6 max-w-4xl">
        <!-- Post Article -->
        <article class="border border-gray-200 shadow-sm hover:shadow-md transition-all duration-200 rounded-2xl overflow-hidden">
            <!-- Title Section -->
            <div class="p-6 border-b border-gray-100">
                <h1 class="text-3xl font-bold text-gray-900 mb-3"><%= post.title %></h1>
                <p class="text-gray-500 text-sm">
                    <%= new Date(post.date_created).toLocaleDateString('en-GB', { day: 'numeric', month: 'long', year: 'numeric' }) %>
                </p>
            </div>

            <!-- Content Section -->
            <div class="p-6">
                <div class="prose lg:prose-lg max-w-none text-gray-700">
                    <%- post.text %>
                </div>
            </div>
        </article>

        <!-- Comments Section -->
        <div class="mt-8">
            <!-- Comment Input -->
            <div id="comment-trigger" class="border border-gray-200 rounded-xl shadow-sm hover:shadow-md transition-all duration-200 p-4 mb-6">
                <input type="text" 
                       class="w-full p-2 text-gray-700 placeholder-gray-400 focus:outline-none" 
                       placeholder="Add a comment..." 
                       onclick="toggleCommentForm()" />
            </div>

            <!-- Comment Form -->
            <div id="comment-form" class="hidden">
                <div class="border border-gray-200 rounded-xl shadow-sm p-6 mb-6">
                    <form action="./comment" method="POST">
                        <textarea name="comment" 
                                rows="4" 
                                class="w-full p-3 mb-4 border border-gray-200 rounded-xl focus:outline-none focus:border-blue-400 focus:ring-1 focus:ring-blue-400" 
                                placeholder="Your comment" 
                                required></textarea>
                        <input type="text" 
                               name="name" 
                               class="w-full p-3 mb-4 border border-gray-200 rounded-xl focus:outline-none focus:border-blue-400 focus:ring-1 focus:ring-blue-400" 
                               placeholder="Your name" 
                               required>
                        <input type="email" 
                               name="email" 
                               class="w-full p-3 mb-4 border border-gray-200 rounded-xl focus:outline-none focus:border-blue-400 focus:ring-1 focus:ring-blue-400" 
                               placeholder="Your email" 
                               required>
                        <input type="password" 
                               name="password" 
                               class="w-full p-3 mb-4 border border-gray-200 rounded-xl focus:outline-none focus:border-blue-400 focus:ring-1 focus:ring-blue-400" 
                               placeholder="Password (optional, for editing)">
                        <div class="flex gap-2">
                            <button type="submit" 
                                    class="px-4 py-2 text-blue-600 border border-blue-200 rounded-xl hover:bg-blue-50 transition-colors duration-200">
                                Submit
                            </button>
                            <button type="button" 
                                    class="px-4 py-2 text-gray-600 border border-gray-200 rounded-xl hover:bg-gray-50 transition-colors duration-200" 
                                    onClick="hideCommentForm()">
                                Cancel
                            </button>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Comments List -->
            <div class="space-y-4">
                <% comments.forEach(function(comment) { %>
                <div class="comment border border-gray-200 rounded-xl shadow-sm p-4" id="comment-<%= comment.id %>">
                    <div class="flex justify-between items-start">
                        <div class="space-y-1">
                            <div class="font-medium text-gray-900"><%= comment.name %></div>
                            <div class="text-sm text-gray-500"><%= comment.email %></div>
                            <p class="comment-text mt-2 text-gray-700"><%= comment.comment %></p>
                            <textarea class="comment-edit-textarea hidden w-full p-3 mt-2 border border-gray-200 rounded-xl" rows="4"><%= comment.comment %></textarea>
                            <input type="password" class="comment-edit-passcode hidden w-full p-3 mt-2 border border-gray-200 rounded-xl" placeholder="Password">
                        </div>
                        <a href="javascript:void(0)" 
                           onclick="editComment('<%= comment.id %>')" 
                           class="edit-link text-blue-600 hover:text-blue-800">
                            edit
                        </a>
                    </div>
                    
                    <!-- Edit Controls -->
                    <div class="mt-3 space-x-2 hidden">
                        <button onClick="updateComment('<%= comment.id %>')" class="save-edit px-3 py-1 text-blue-600 border border-blue-200 rounded-lg hover:bg-blue-50">Update</button>
                        <button onClick="deleteComment('<%= comment.id %>')" class="delete-edit px-3 py-1 text-red-600 border border-red-200 rounded-lg hover:bg-red-50">Delete</button>
                        <button onClick="cancelEdit('<%= comment.id %>')" class="cancel-edit px-3 py-1 text-gray-600 border border-gray-200 rounded-lg hover:bg-gray-50">Cancel</button>
                    </div>

                    <div class="text-right text-xs text-gray-400 mt-2">
                        <%= new Date(comment.created_at).toLocaleDateString('en-GB', { day: 'numeric', month: 'long', year: 'numeric', hour: '2-digit', minute: '2-digit' }) %>
                    </div>
                </div>
                <% }); %>
            </div>
        </div>
    </div>

    <script>

    function toggleCommentForm() {
        var commentForm = document.getElementById('comment-form');
        var commentTrigger = document.getElementById('comment-trigger');

        commentForm.classList.toggle('hidden');
        document.getElementById('comment-trigger').classList.add('hidden');
    }

    function hideCommentForm() {
        var commentTrigger = document.getElementById('comment-trigger');

        document.getElementById('comment-form').classList.add('hidden');
        commentTrigger.classList.toggle('hidden');
    }

    document.addEventListener('DOMContentLoaded', function() {
      document.getElementById('comment-form').addEventListener('submit', function(e) {
        e.preventDefault(); // Prevent the default form submission behavior

        // Use 'event.target' which is the form that triggered the submit event
        var formData = new FormData(e.target);

        fetch(window.location.pathname + "/comment", {
          method: 'POST',
          body: formData
        })
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          // After successful submission, reload the page to reflect the new comment
          window.location.reload();
        })
        .catch(error => {
          console.error('There was a problem with the fetch operation:', error);
        });
      });
    });

    function editComment(commentId) {
      // Find the comment elements
      const commentElement = document.getElementById('comment-' + commentId);
      const editTextarea = commentElement.querySelector('.comment-edit-textarea');
      const editPasscode = commentElement.querySelector('.comment-edit-passcode');
      const saveButton = commentElement.querySelector('.save-edit');
      const deleteButton = commentElement.querySelector('.delete-edit');
      const editLink = commentElement.querySelector('.edit-link');
      const commentText = commentElement.querySelector('.comment-text');
      const cancelEdit = commentElement.querySelector('.cancel-edit');

      // Toggle visibility
      editTextarea.classList.toggle('hidden');
      editPasscode.classList.toggle('hidden');
      saveButton.classList.toggle('hidden');
      deleteButton.classList.toggle('hidden');
      commentText.classList.toggle('hidden');
      editLink.classList.toggle('hidden');
      cancelEdit.classList.toggle('hidden');

    }

    function cancelEdit(commentId) {
      // Find the comment elements
      const commentElement = document.getElementById('comment-' + commentId);
      const editTextarea = commentElement.querySelector('.comment-edit-textarea');
      const editPasscode = commentElement.querySelector('.comment-edit-passcode');
      const saveButton = commentElement.querySelector('.save-edit');
      const deleteButton = commentElement.querySelector('.delete-edit');
      const cancelButton = commentElement.querySelector('.cancel-edit');
      const editLink = commentElement.querySelector('.edit-link');
      const commentText = commentElement.querySelector('.comment-text');

      // Hide the edit fields and buttons
      editTextarea.classList.add('hidden');
      editPasscode.classList.add('hidden');
      saveButton.classList.add('hidden');
      deleteButton.classList.add('hidden');
      cancelButton.classList.add('hidden');

      // Show the non-editable comment text and the edit link
      commentText.classList.remove('hidden');
      editLink.classList.remove('hidden');
    }

    function handleResponse(response) {
      // Otherwise, parse the JSON response and check for errors
      return response.json().then(data => {
        if (!response.ok) {
          throw new Error(data.message || 'An unknown error occurred');
        }
        return data;
      });
    }

    function updateComment(commentId) {
      // Retrieve the comment text and password from the input fields
      const commentElement = document.getElementById('comment-' + commentId);
      const commentText = commentElement.querySelector('.comment-edit-textarea').value;
      const password = commentElement.querySelector('.comment-edit-passcode').value;

      // Construct the request URL
      const postId = window.location.pathname.split('/')[2];
      const url = `/blog/${postId}/comment/${commentId}`;

      // Send a PUT request to the server
      fetch(url, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ comment: commentText, password: password })
      })
      .then(handleResponse)
      .then(data => {
        if (data.success) {
          alert(data.message);
          window.location.reload();
        }
      })
      .catch(error => {
        console.error('Error:', error);
        alert(error.message);
      });
    }

    function deleteComment(commentId) {
      // Retrieve the password from the input field
      const commentElement = document.getElementById('comment-' + commentId);
      const password = commentElement.querySelector('.comment-edit-passcode').value;

      // Construct the request URL
      const postId = window.location.pathname.split('/')[2];
      const url = `/blog/${postId}/comment/${commentId}`;

      // Send a DELETE request to the server
      fetch(url, {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ password: password })
      })
      .then(handleResponse)
      .then(data => {
        if (data.success) {
          alert(data.message);
          window.location.reload();
        }
      })
      .catch(error => {
        alert(error.message);
      });
    }

  </script>
</body>
</html>
